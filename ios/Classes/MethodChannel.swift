// Autogenerated from Pigeon (v7.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif
import DGis



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: FlutterError) -> [Any?] {
  return [
    error.code,
    error.message,
    error.details
  ]
}

/// Тема карты
enum DataMapTheme: Int {
  /// Тема, заданная на устройстве пользователя
  case auto = 0
  /// Темная тема карты
  case dark = 1
  /// Светлая тема карты
  case light = 2
}

/// Состояние камеры
/// https://docs.2gis.com/ru/android/sdk/reference/5.1/ru.dgis.sdk.map.CameraState
enum DataCameraState: Int {
  /// Камера управляется пользователем.
  case busy = 0
  /// Eсть активный перелёт.
  case fly = 1
  /// Камера в режиме слежения за позицией.
  case followPosition = 2
  /// Камера не управляется пользователем и нет активных перелётов.
  case free = 3
}

/// Тип анимации при перемещении камеры
/// https://docs.2gis.com/ru/android/sdk/reference/5.1/ru.dgis.sdk.map.CameraAnimationType
enum DataCameraAnimationType: Int {
  /// Тип перелёта выбирается в зависимости от расстояния между начальной и конечной позициями
  case def = 0
  /// Линейное изменение параметров позиции камеры
  case linear = 1
  /// Zoom изменяется таким образом, чтобы постараться в какой-то момент перелёта отобразить начальную и конечную позиции.
  /// Позиции могут быть не отображены, если текущие ограничения (см. ICamera::zoom_restrictions()) не позволяют установить столь малый zoom.
  case showBothPositions = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataCreationParams {
  var position: DataLatLng
  var zoom: Double
  var mapTheme: DataMapTheme

  static func fromList(_ list: [Any?]) -> DataCreationParams? {
    let position = DataLatLng.fromList(list[0] as! [Any?])!
    let zoom = list[1] as! Double
    let mapTheme = DataMapTheme(rawValue: list[2] as! Int)!

    return DataCreationParams(
      position: position,
      zoom: zoom,
      mapTheme: mapTheme
    )
  }
  func toList() -> [Any?] {
    return [
      position.toList(),
      zoom,
      mapTheme.rawValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataLatLng {
  var latitude: Double
  var longitude: Double

  static func fromList(_ list: [Any?]) -> DataLatLng? {
    let latitude = list[0] as! Double
    let longitude = list[1] as! Double

    return DataLatLng(
      latitude: latitude,
      longitude: longitude
    )
  }
  func toList() -> [Any?] {
    return [
      latitude,
      longitude,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataMarkerBitmap {
  /// Байты изображения
  var bytes: FlutterStandardTypedData
  /// Ширина изображения,
  /// если null, используется значение по умолчанию,
  /// которое зависит от нативной реализации
  var width: Double? = nil
  /// Высота изображения,
  /// если null, используется значение по умолчанию,
  /// которое зависит от нативной реализации
  var height: Double? = nil

  static func fromList(_ list: [Any?]) -> DataMarkerBitmap? {
    let bytes = list[0] as! FlutterStandardTypedData
    let width = list[1] as? Double 
    let height = list[2] as? Double 

    return DataMarkerBitmap(
      bytes: bytes,
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      bytes,
      width,
      height,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataMarker {
  /// Уникальный идентификатор маркера
  var markerId: DataMapObjectId
  /// Изображение маркера
  /// Используется нативная реализация дефолтного маркера,
  /// если null
  var bitmap: DataMarkerBitmap? = nil
  /// Позиция маркера
  var position: DataLatLng
  /// Текст под маркером
  var infoText: String? = nil

  static func fromList(_ list: [Any?]) -> DataMarker? {
    let markerId = DataMapObjectId.fromList(list[0] as! [Any?])!
    var bitmap: DataMarkerBitmap? = nil
    if let bitmapList = list[1] as? [Any?] {
      bitmap = DataMarkerBitmap.fromList(bitmapList)
    }
    let position = DataLatLng.fromList(list[2] as! [Any?])!
    let infoText = list[3] as? String 

    return DataMarker(
      markerId: markerId,
      bitmap: bitmap,
      position: position,
      infoText: infoText
    )
  }
  func toList() -> [Any?] {
    return [
      markerId.toList(),
      bitmap?.toList(),
      position.toList(),
      infoText,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GeoPoint {
  /// Координата долготы
  var latitude: Double
  /// Координата широты
  var longitude: Double

  static func fromList(_ list: [Any?]) -> GeoPoint? {
    let latitude = list[0] as! Double
    let longitude = list[1] as! Double

    return GeoPoint(
      latitude: latitude,
      longitude: longitude
    )
  }
  func toList() -> [Any?] {
    return [
      latitude,
      longitude,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataCameraStateValue {
  var value: DataCameraState

  static func fromList(_ list: [Any?]) -> DataCameraStateValue? {
    let value = DataCameraState(rawValue: list[0] as! Int)!

    return DataCameraStateValue(
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      value.rawValue,
    ]
  }
}

/// Отступ камеры от краев экрана в пикселях
///
/// Generated class from Pigeon that represents data sent in messages.
struct DataPadding {
  var left: Int
  var top: Int
  var right: Int
  var bottom: Int

  static func fromList(_ list: [Any?]) -> DataPadding? {
    let left = list[0] as! Int
    let top = list[1] as! Int
    let right = list[2] as! Int
    let bottom = list[3] as! Int

    return DataPadding(
      left: left,
      top: top,
      right: right,
      bottom: bottom
    )
  }
  func toList() -> [Any?] {
    return [
      left,
      top,
      right,
      bottom,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataLatLngBounds {
  var southwest: DataLatLng
  var northeast: DataLatLng

  static func fromList(_ list: [Any?]) -> DataLatLngBounds? {
    let southwest = DataLatLng.fromList(list[0] as! [Any?])!
    let northeast = DataLatLng.fromList(list[1] as! [Any?])!

    return DataLatLngBounds(
      southwest: southwest,
      northeast: northeast
    )
  }
  func toList() -> [Any?] {
    return [
      southwest.toList(),
      northeast.toList(),
    ]
  }
}

/// Позиция камеры
///
/// Generated class from Pigeon that represents data sent in messages.
struct DataCameraPosition {
  /// Азимут камеры в градусах
  var bearing: Double
  /// Центр камеры
  var target: DataLatLng
  /// Угол наклона камеры (в градусах)
  var tilt: Double
  /// Зум камеры
  var zoom: Double

  static func fromList(_ list: [Any?]) -> DataCameraPosition? {
    let bearing = list[0] as! Double
    let target = DataLatLng.fromList(list[1] as! [Any?])!
    let tilt = list[2] as! Double
    let zoom = list[3] as! Double

    return DataCameraPosition(
      bearing: bearing,
      target: target,
      tilt: tilt,
      zoom: zoom
    )
  }
  func toList() -> [Any?] {
    return [
      bearing,
      target.toList(),
      tilt,
      zoom,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataMapObjectId {
  var value: String

  static func fromList(_ list: [Any?]) -> DataMapObjectId? {
    let value = list[0] as! String

    return DataMapObjectId(
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataMarkerUpdates {
  var toRemove: [DataMarker?]
  var toAdd: [DataMarker?]

  static func fromList(_ list: [Any?]) -> DataMarkerUpdates? {
    let toRemove = list[0] as! [DataMarker?]
    let toAdd = list[1] as! [DataMarker?]

    return DataMarkerUpdates(
      toRemove: toRemove,
      toAdd: toAdd
    )
  }
  func toList() -> [Any?] {
    return [
      toRemove,
      toAdd,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataPolylineUpdates {
  var toRemove: [DataPolyline?]
  var toAdd: [DataPolyline?]

  static func fromList(_ list: [Any?]) -> DataPolylineUpdates? {
    let toRemove = list[0] as! [DataPolyline?]
    let toAdd = list[1] as! [DataPolyline?]

    return DataPolylineUpdates(
      toRemove: toRemove,
      toAdd: toAdd
    )
  }
  func toList() -> [Any?] {
    return [
      toRemove,
      toAdd,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DataPolyline {
  /// Уникальный идентификатор маркера
  var polylineId: DataMapObjectId
  var points: [DataLatLng?]
  var width: Double
  var color: Int
  var erasedPart: Double

  static func fromList(_ list: [Any?]) -> DataPolyline? {
    let polylineId = DataMapObjectId.fromList(list[0] as! [Any?])!
    let points = list[1] as! [DataLatLng?]
    let width = list[2] as! Double
    let color = list[3] as! Int
    let erasedPart = list[4] as! Double

    return DataPolyline(
      polylineId: polylineId,
      points: points,
      width: width,
      color: color,
      erasedPart: erasedPart
    )
  }
  func toList() -> [Any?] {
    return [
      polylineId.toList(),
      points,
      width,
      color,
      erasedPart,
    ]
  }
}

private class PluginHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return DataCameraPosition.fromList(self.readValue() as! [Any])
      case 129:
        return DataLatLng.fromList(self.readValue() as! [Any])
      case 130:
        return DataLatLngBounds.fromList(self.readValue() as! [Any])
      case 131:
        return DataMapObjectId.fromList(self.readValue() as! [Any])
      case 132:
        return DataMarker.fromList(self.readValue() as! [Any])
      case 133:
        return DataMarkerBitmap.fromList(self.readValue() as! [Any])
      case 134:
        return DataMarkerUpdates.fromList(self.readValue() as! [Any])
      case 135:
        return DataPadding.fromList(self.readValue() as! [Any])
      case 136:
        return DataPolyline.fromList(self.readValue() as! [Any])
      case 137:
        return DataPolylineUpdates.fromList(self.readValue() as! [Any])
      case 138:
        return GeoPoint.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class PluginHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DataCameraPosition {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? DataLatLng {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? DataLatLngBounds {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? DataMapObjectId {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? DataMarker {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? DataMarkerBitmap {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? DataMarkerUpdates {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? DataPadding {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? DataPolyline {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? DataPolylineUpdates {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? GeoPoint {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PluginHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PluginHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PluginHostApiCodecWriter(data: data)
  }
}

class PluginHostApiCodec: FlutterStandardMessageCodec {
  static let shared = PluginHostApiCodec(readerWriter: PluginHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PluginHostApi {
  /// Получение текущей позиции камеры
  ///
  /// Возвращает [DataCameraPosition]
  /// Позицию камеры в текущий момент времени
  func getCameraPosition() -> DataCameraPosition
  /// Перемещение камеры к заданной позиции [CameraPosition]
  /// [duration] - длительность анимации в миллисекундах,
  /// если не указана, используется нативное значение
  /// [cameraAnimationType] - тип анимации
  func moveCamera(cameraPosition: DataCameraPosition, duration: Int?, cameraAnimationType: DataCameraAnimationType, completion: @escaping () -> Void)
  /// Перемещение камеры к области из двух точек
  func moveCameraToBounds(firstPoint: DataLatLng, secondPoint: DataLatLng, padding: DataPadding, duration: Int?, cameraAnimationType: DataCameraAnimationType, completion: @escaping () -> Void)
  /// Обновление маркеров
  ///
  /// [markerUpdates] - объект с информацией об обновлении маркеров
  func updateMarkers(updates: DataMarkerUpdates)
  /// Построение маршрута
  ///
  /// [createRoute] - объект с информацией построение маршрута
  func createRoute(startPoint: GeoPoint, endPoint: GeoPoint)
  /// Обновление полилайнов
  ///
  /// [polylineUpdates] - объект с информацией об обновлении полилайнов
  func updatePolylines(updates: DataPolylineUpdates)
  /// Изменение слоя с маркером своего местоположения
  ///
  /// [isVisible] - true, добавляет слой со своей локацией, если его еще нет на карте
  /// false - убирает слой с карты, если он етсь на карте
  func changeMyLocationLayerState(isVisible: Bool)
  /// Получение координат текущего экрана
  func getVisibleArea() -> DataLatLngBounds
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PluginHostApiSetup {
  /// The codec used by PluginHostApi.
  static var codec: FlutterStandardMessageCodec { PluginHostApiCodec.shared }
  /// Sets up an instance of `PluginHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, id: Int64, api: PluginHostApi?) {
    /// Получение текущей позиции камеры
    ///
    /// Возвращает [DataCameraPosition]
    /// Позицию камеры в текущий момент времени
    let getCameraPositionChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).getCameraPosition", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCameraPositionChannel.setMessageHandler { _, reply in
        let result = api.getCameraPosition()
        reply(wrapResult(result))
      }
    } else {
      getCameraPositionChannel.setMessageHandler(nil)
    }
    /// Перемещение камеры к заданной позиции [CameraPosition]
    /// [duration] - длительность анимации в миллисекундах,
    /// если не указана, используется нативное значение
    /// [cameraAnimationType] - тип анимации
    let moveCameraChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).moveCamera", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      moveCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let cameraPositionArg = args[0] as! DataCameraPosition
        let durationArg = args[1] as? Int
        let cameraAnimationTypeArg = DataCameraAnimationType(rawValue: args[2] as! Int)!
        api.moveCamera(cameraPosition: cameraPositionArg, duration: durationArg, cameraAnimationType: cameraAnimationTypeArg) {
          reply(wrapResult(nil))
        }
      }
    } else {
      moveCameraChannel.setMessageHandler(nil)
    }
    /// Перемещение камеры к области из двух точек
    let moveCameraToBoundsChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).moveCameraToBounds", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      moveCameraToBoundsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let firstPointArg = args[0] as! DataLatLng
        let secondPointArg = args[1] as! DataLatLng
        let paddingArg = args[2] as! DataPadding
        let durationArg = args[3] as? Int
        let cameraAnimationTypeArg = DataCameraAnimationType(rawValue: args[4] as! Int)!
        api.moveCameraToBounds(firstPoint: firstPointArg, secondPoint: secondPointArg, padding: paddingArg, duration: durationArg, cameraAnimationType: cameraAnimationTypeArg) {
          reply(wrapResult(nil))
        }
      }
    } else {
      moveCameraToBoundsChannel.setMessageHandler(nil)
    }
    /// Обновление маркеров
    ///
    /// [markerUpdates] - объект с информацией об обновлении маркеров
    let updateMarkersChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).updateMarkers", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateMarkersChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let updatesArg = args[0] as! DataMarkerUpdates
        api.updateMarkers(updates: updatesArg)
        reply(wrapResult(nil))
      }
    } else {
      updateMarkersChannel.setMessageHandler(nil)
    }
    /// Построение маршрута
    ///
    /// [createRoute] - объект с информацией построение маршрута
    let createRouteChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).createRoute", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createRouteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let startPointArg = args[0] as! GeoPoint
        let endPointArg = args[1] as! GeoPoint
        api.createRoute(startPoint: startPointArg, endPoint: endPointArg)
        reply(wrapResult(nil))
      }
    } else {
      createRouteChannel.setMessageHandler(nil)
    }
    /// Обновление полилайнов
    ///
    /// [polylineUpdates] - объект с информацией об обновлении полилайнов
    let updatePolylinesChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).updatePolylines", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatePolylinesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let updatesArg = args[0] as! DataPolylineUpdates
        api.updatePolylines(updates: updatesArg)
        reply(wrapResult(nil))
      }
    } else {
      updatePolylinesChannel.setMessageHandler(nil)
    }
    /// Изменение слоя с маркером своего местоположения
    ///
    /// [isVisible] - true, добавляет слой со своей локацией, если его еще нет на карте
    /// false - убирает слой с карты, если он етсь на карте
    let changeMyLocationLayerStateChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).changeMyLocationLayerState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      changeMyLocationLayerStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isVisibleArg = args[0] as! Bool
        api.changeMyLocationLayerState(isVisible: isVisibleArg)
        reply(wrapResult(nil))
      }
    } else {
      changeMyLocationLayerStateChannel.setMessageHandler(nil)
    }
    /// Получение координат текущего экрана
    let getVisibleAreaChannel = FlutterBasicMessageChannel(name: "pro.flown.PluginHostApi_\(id).getVisibleArea", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVisibleAreaChannel.setMessageHandler { _, reply in
        let result = api.getVisibleArea()
        reply(wrapResult(result))
      }
    } else {
      getVisibleAreaChannel.setMessageHandler(nil)
    }
  }
}
private class PluginFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return DataCameraStateValue.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class PluginFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? DataCameraStateValue {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? RenderedObjectInfo {
        super.writeByte(138)
        super.writeValue([value.closestMapPoint.latitude.value, value.closestMapPoint.longitude.value])
    }else {
      super.writeValue(value)
    }
  }
}

private class PluginFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PluginFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PluginFlutterApiCodecWriter(data: data)
  }
}

class PluginFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = PluginFlutterApiCodec(readerWriter: PluginFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class PluginFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  private let id: Int64
  init(binaryMessenger: FlutterBinaryMessenger, id: Int64){
    self.binaryMessenger = binaryMessenger
    self.id = id
  }
  var codec: FlutterStandardMessageCodec {
    return PluginFlutterApiCodec.shared
  }
  /// Коллбэк на изменение состояния камеры
  /// [cameraState] - индекс в перечислении [CameraState]
  func onMapObjectTapCallback(renderedObjectInfo: DGis.RenderedObjectInfo) {
    let channel = FlutterBasicMessageChannel(name: "fgis.ontap_marker", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([renderedObjectInfo] as [Any?]) { _ in
        
    }
  }
  /// Коллбэк на изменение состояния камеры
  /// [cameraState] - индекс в перечислении [CameraState]
  func onCameraStateChanged(cameraState cameraStateArg: DataCameraStateValue, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "pro.flown.PluginFlutterApi_\(id).onCameraStateChanged", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([cameraStateArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Коллбэк на завршение сохдания нативной карты
  func onNativeMapReady(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "pro.flown.PluginFlutterApi_\(id).onNativeMapReady", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
}
